
<repository lastmodified='20180412111338.980' name='Weasis Bundle Repository'>
  <resource id='com.jfoenix/8.0.2' presentationname='JFoenix' symbolicname='com.jfoenix' uri='jfoenix-8.0.2.jar' version='8.0.2'>
    <description>
      JavaFX Material Design Library
    </description>
    <size>
      2442326
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='JFoenix'/>
      <p n='symbolicname' v='com.jfoenix'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.android.skins'/>
      <p n='uses' v='com.jfoenix.controls,com.sun.javafx.scene.control.skin,javafx.scene.control'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.animation'/>
      <p n='uses' v='javafx.animation,javafx.scene'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.animation.alert'/>
      <p n='uses' v='com.jfoenix.transitions,javafx.animation,javafx.scene'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.concurrency'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.controls'/>
      <p n='uses' v='com.jfoenix.animation.alert,com.jfoenix.controls.datamodels.treetable,com.jfoenix.controls.events,com.jfoenix.converters.base,com.jfoenix.validation.base,javafx.animation,javafx.beans,javafx.beans.binding,javafx.beans.property,javafx.beans.value,javafx.collections,javafx.css,javafx.event,javafx.geometry,javafx.scene,javafx.scene.control,javafx.scene.layout,javafx.scene.paint,javafx.scene.text,javafx.stage,javafx.util'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.controls.behavior'/>
      <p n='uses' v='com.jfoenix.controls,com.sun.javafx.scene.control.behavior,javafx.scene.control,javafx.scene.paint'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.controls.cells.editors'/>
      <p n='uses' v='com.jfoenix.controls.cells.editors.base,javafx.beans.binding,javafx.beans.value,javafx.event,javafx.scene.input,javafx.scene.layout'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.controls.cells.editors.base'/>
      <p n='uses' v='javafx.beans.binding,javafx.beans.value,javafx.event,javafx.scene.control,javafx.scene.input,javafx.scene.layout'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.controls.datamodels.treetable'/>
      <p n='uses' v='javafx.beans.property,javafx.collections,javafx.scene.control'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.controls.events'/>
      <p n='uses' v='javafx.event'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.converters'/>
      <p n='uses' v='com.jfoenix.controls,com.sun.javafx.css,javafx.css,javafx.scene.text'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.converters.base'/>
      <p n='uses' v='javafx.scene'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.effects'/>
      <p n='uses' v='javafx.scene,javafx.scene.effect'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.responsive'/>
      <p n='uses' v='javafx.css,javafx.stage'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.skins'/>
      <p n='uses' v='com.jfoenix.controls,com.sun.javafx.scene.control.behavior,com.sun.javafx.scene.control.skin,javafx.animation,javafx.beans.property,javafx.css,javafx.event,javafx.scene,javafx.scene.control,javafx.scene.layout,javafx.scene.paint,javafx.scene.transform,javafx.stage,javafx.util'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.svg'/>
      <p n='uses' v='javafx.beans.property,javafx.css,javafx.scene.layout,javafx.scene.paint'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.transitions'/>
      <p n='uses' v='javafx.animation,javafx.beans.property,javafx.beans.value,javafx.scene,javafx.scene.layout,javafx.scene.paint,javafx.util'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.transitions.hamburger'/>
      <p n='uses' v='com.jfoenix.controls,com.jfoenix.transitions,javafx.animation'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.utils'/>
      <p n='uses' v='javafx.event,javafx.scene,javafx.scene.input,javafx.scene.layout,javafx.scene.paint,javafx.util'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.validation'/>
      <p n='uses' v='com.jfoenix.validation.base,javafx.beans,javafx.beans.property,javafx.collections,javafx.scene.control,javafx.scene.layout'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.jfoenix.validation.base'/>
      <p n='uses' v='javafx.beans.property,javafx.css,javafx.scene'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.jfoenix.animation.alert)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.animation.alert ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.concurrency)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.concurrency ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.controls)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.controls ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.controls.behavior)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.controls.behavior ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.controls.cells.editors)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.controls.cells.editors ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.controls.cells.editors.base)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.controls.cells.editors.base ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.controls.datamodels.treetable)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.controls.datamodels.treetable ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.controls.events)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.controls.events ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.converters)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.converters ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.converters.base)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.converters.base ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.effects)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.effects ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.skins)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.skins ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.svg)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.svg ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.transitions)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.transitions ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.transitions.hamburger)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.transitions.hamburger ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.utils)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.utils ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.validation)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.validation ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.jfoenix.validation.base)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.validation.base ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.binding)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.binding
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.css)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.css
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.css.converters)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.css.converters
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.event)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.event
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.scene.control)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.scene.control
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.scene.control.behavior)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.scene.control.behavior
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.scene.control.skin)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.scene.control.skin
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.util
    </require>
    <require extend='false' filter='(&amp;(package=javafx.animation)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.animation
    </require>
    <require extend='false' filter='(&amp;(package=javafx.application)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.application
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans.binding)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.binding
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans.property)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.property
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans.value)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.value
    </require>
    <require extend='false' filter='(&amp;(package=javafx.collections)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.collections
    </require>
    <require extend='false' filter='(&amp;(package=javafx.collections.transformation)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.collections.transformation
    </require>
    <require extend='false' filter='(&amp;(package=javafx.css)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.css
    </require>
    <require extend='false' filter='(&amp;(package=javafx.event)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.event
    </require>
    <require extend='false' filter='(&amp;(package=javafx.geometry)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.geometry
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.control)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.control
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.effect)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.effect
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.image)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.image
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.input)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.input
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.layout)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.layout
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.paint)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.paint
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.shape)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.shape
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.text)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.text
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.transform)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.transform
    </require>
    <require extend='false' filter='(&amp;(package=javafx.stage)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.stage
    </require>
    <require extend='false' filter='(&amp;(package=javafx.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.util
    </require>
    <require extend='false' filter='(&amp;(package=javafx.util.converter)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.util.converter
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.parsers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.parsers
    </require>
    <require extend='false' filter='(&amp;(package=org.w3c.dom)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.w3c.dom
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
  <resource id='javax.vecmath/1.5.2' presentationname='Vecmath Library' symbolicname='javax.vecmath' uri='vecmath-1.5.2.jar' version='1.5.2'>
    <size>
      318956
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Vecmath Library'/>
      <p n='symbolicname' v='javax.vecmath'/>
      <p n='version' t='version' v='1.5.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='javax.vecmath'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
  </resource>
  <resource id='org.apache.felix.bundlerepository/2.0.10' presentationname='Apache Felix Bundle Repository' symbolicname='org.apache.felix.bundlerepository' uri='org.apache.felix.bundlerepository-2.0.10.jar' version='2.0.10'>
    <description>
      Bundle repository service.
    </description>
    <size>
      237308
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://felix.apache.org/site/apache-felix-osgi-bundle-repository.html
    </documentation>
    <source>
      http://felix.apache.org/site/downloads.cgi
    </source>
    <capability name='service'>
      <p n='service' v='org.apache.felix.bundlerepository.RepositoryAdmin'/>
    </capability>
    <capability name='service'>
      <p n='service' v='org.osgi.service.obr.RepositoryAdmin'/>
    </capability>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Felix Bundle Repository'/>
      <p n='symbolicname' v='org.apache.felix.bundlerepository'/>
      <p n='version' t='version' v='2.0.10'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.repository'/>
      <p n='uses' v='org.osgi.resource'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.bundlerepository'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='2.1.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.osgi.service.repository)(version&gt;=1.0.0)(!(version&gt;=1.1.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.repository ;version=[1.0.0,1.1.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.log)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.log ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.obr)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.obr ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.shell)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.apache.felix.shell ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.service.command)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.apache.felix.service.command ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.xml.stream
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.bundlerepository)(version&gt;=2.1.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.bundlerepository ;version=[2.1.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.7.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.7.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework.wiring)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework.wiring ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.resource)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.resource ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.cm)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.cm ;version=[1.5.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.url)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.url ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.util.tracker)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.util.tracker ;version=[1.5.0,2.0.0)
    </require>
  </resource>
  <resource id='org.apache.felix.configadmin/1.8.16' presentationname='Apache Felix Configuration Admin Service' symbolicname='org.apache.felix.configadmin' uri='org.apache.felix.configadmin-1.8.16.jar' version='1.8.16'>
    <description>
      Implementation of the OSGi Configuration Admin Service Specification
       1.5
    </description>
    <size>
      140710
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://felix.apache.org/site/apache-felix-config-admin.html
    </documentation>
    <category id='osgi'/>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Felix Configuration Admin Service'/>
      <p n='symbolicname' v='org.apache.felix.configadmin'/>
      <p n='version' t='version' v='1.8.16'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.cm'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.cm.file'/>
      <p n='uses' v='org.apache.felix.cm,org.osgi.framework'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.cm'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.5.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.apache.felix.cm)(version&gt;=1.1.0)(!(version&gt;=1.2.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.cm ;version=[1.1.0,1.2.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.cm.file)(version&gt;=1.0.0)(!(version&gt;=1.1.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.cm.file ;version=[1.0.0,1.1.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.cm)(version&gt;=1.5.0)(!(version&gt;=1.6.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.cm ;version=[1.5.0,1.6.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.log)(version&gt;=1.3.0))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.log ;version=1.3.0
    </require>
  </resource>
  <resource id='org.apache.felix.gogo.command/1.0.2' presentationname='Apache Felix Gogo Command' symbolicname='org.apache.felix.gogo.command' uri='org.apache.felix.gogo.command-1.0.2.jar' version='1.0.2'>
    <description>
      Provides basic shell commands for Gogo.
    </description>
    <size>
      46575
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://www.apache.org/
    </documentation>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Felix Gogo Command'/>
      <p n='symbolicname' v='org.apache.felix.gogo.command'/>
      <p n='version' t='version' v='1.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.log'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.3.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.apache.felix.service.command)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.service.command ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.5.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework.wiring)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.framework.wiring ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.log)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.log ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.packageadmin)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.packageadmin ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.startlevel)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.startlevel ;version=[1.1.0,2.0.0)
    </require>
  </resource>
  <resource id='org.apache.felix.gogo.runtime/1.0.10' presentationname='Apache Felix Gogo Runtime' symbolicname='org.apache.felix.gogo.runtime' uri='org.apache.felix.gogo.runtime-1.0.10.jar' version='1.0.10'>
    <description>
      Apache Felix Gogo Subproject
    </description>
    <size>
      193802
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://www.apache.org/
    </documentation>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Felix Gogo Runtime'/>
      <p n='symbolicname' v='org.apache.felix.gogo.runtime'/>
      <p n='version' t='version' v='1.0.10'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.service.command'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.service.threadio'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.gogo.runtime'/>
      <p n='uses' v='org.apache.felix.service.command,org.apache.felix.service.threadio,org.osgi.framework'/>
      <p n='version' t='version' v='1.0.10'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.gogo.runtime.activator'/>
      <p n='uses' v='org.apache.felix.gogo.runtime,org.apache.felix.service.command,org.apache.felix.service.threadio,org.osgi.framework'/>
      <p n='version' t='version' v='1.0.10'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.gogo.runtime.threadio'/>
      <p n='uses' v='org.apache.felix.service.threadio'/>
      <p n='version' t='version' v='1.0.10'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.osgi.service.event)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.event ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.gogo.runtime)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.gogo.runtime ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.gogo.runtime.threadio)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.gogo.runtime.threadio ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.service.command)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.service.command ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.service.threadio)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.service.threadio ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.util.tracker)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.util.tracker ;version=[1.5.0,2.0.0)
    </require>
  </resource>
  <resource id='org.apache.felix.gogo.shell/1.0.0' presentationname='Apache Felix Gogo Shell' symbolicname='org.apache.felix.gogo.shell' uri='org.apache.felix.gogo.shell-1.0.0.jar' version='1.0.0'>
    <description>
      Apache Felix Gogo Subproject
    </description>
    <size>
      57662
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://www.apache.org/
    </documentation>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Felix Gogo Shell'/>
      <p n='symbolicname' v='org.apache.felix.gogo.shell'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.apache.felix.service.command)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.service.command ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.startlevel)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.startlevel ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.util.tracker)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.util.tracker ;version=[1.5.0,2.0.0)
    </require>
  </resource>
  <resource id='org.apache.felix.metatype/1.1.6' presentationname='Apache Felix Metatype Service' symbolicname='org.apache.felix.metatype' uri='org.apache.felix.metatype-1.1.6.jar' version='1.1.6'>
    <description>
      Implementation of the OSGi Metatype Service Specification 1.3
    </description>
    <size>
      74280
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://felix.apache.org/site/apache-felix-metatype-service.html
    </documentation>
    <category id='osgi'/>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Felix Metatype Service'/>
      <p n='symbolicname' v='org.apache.felix.metatype'/>
      <p n='version' t='version' v='1.1.6'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.metatype'/>
      <p n='uses' v='org.osgi.framework,org.osgi.service.metatype'/>
      <p n='version' t='version' v='1.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.metatype'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.3.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.log)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.log ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.metatype)(version&gt;=1.3.0)(!(version&gt;=1.4.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.metatype ;version=[1.3.0,1.4.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.util.tracker)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.util.tracker ;version=[1.5.0,2.0.0)
    </require>
  </resource>
  <resource id='org.apache.felix.prefs/1.1.0' presentationname='Apache Felix Preferences Service' symbolicname='org.apache.felix.prefs' uri='org.apache.felix.prefs-1.1.0.jar' version='1.1.0'>
    <description>
      Implementation of the OSGi Preferences Service Specification
       1.1.1
    </description>
    <size>
      66240
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://www.apache.org/
    </documentation>
    <category id='osgi'/>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Felix Preferences Service'/>
      <p n='symbolicname' v='org.apache.felix.prefs'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.prefs'/>
      <p n='uses' v='org.osgi.service.prefs'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.prefs'/>
      <p n='version' t='version' v='1.1.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.7.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.7.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.prefs)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.prefs ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.util.tracker)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.util.tracker ;version=[1.5.0,2.0.0)
    </require>
  </resource>
  <resource id='org.apache.felix.scr/2.0.14' presentationname='Apache Felix Declarative Services' symbolicname='org.apache.felix.scr' uri='org.apache.felix.scr-2.0.14.jar' version='2.0.14'>
    <description>
      Implementation of the Declarative Services specification 1.3
    </description>
    <size>
      379608
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://felix.apache.org/site/apache-felix-service-component-runtime.html
    </documentation>
    <category id='osgi'/>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Felix Declarative Services'/>
      <p n='symbolicname' v='org.apache.felix.scr'/>
      <p n='version' t='version' v='2.0.14'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.scr.component'/>
      <p n='uses' v='org.osgi.service.component'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.scr.info'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.component'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.3.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.component.runtime'/>
      <p n='uses' v='org.osgi.framework,org.osgi.service.component.runtime.dto,org.osgi.util.promise'/>
      <p n='version' t='version' v='1.3.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.component.runtime.dto'/>
      <p n='uses' v='org.osgi.dto,org.osgi.framework.dto'/>
      <p n='version' t='version' v='1.3.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.util.function'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.util.promise'/>
      <p n='uses' v='org.osgi.util.function'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.osgi.service.cm)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.cm ;version=[1.5.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.log)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.log ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.metatype)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.metatype ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.packageadmin)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.packageadmin ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.service.command)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.apache.felix.service.command ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.shell)(version&gt;=1.0.0)(!(version&gt;=1.1.0)))' multiple='false' name='package' optional='true'>
      Import package org.apache.felix.shell ;version=[1.0.0,1.1.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.scr.component)(version&gt;=1.1.0)(!(version&gt;=1.2.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.scr.component ;version=[1.1.0,1.2.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.scr.info)(version&gt;=1.0.0)(!(version&gt;=1.1.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.scr.info ;version=[1.0.0,1.1.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.dto)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.dto ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.8.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.8.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework.dto)(version&gt;=1.8.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework.dto ;version=[1.8.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework.startlevel)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework.startlevel ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework.wiring)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework.wiring ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.component)(version&gt;=1.3.0)(!(version&gt;=1.4.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.component ;version=[1.3.0,1.4.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.component.runtime)(version&gt;=1.3.0)(!(version&gt;=1.4.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.component.runtime ;version=[1.3.0,1.4.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.component.runtime.dto)(version&gt;=1.3.0)(!(version&gt;=1.4.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.component.runtime.dto ;version=[1.3.0,1.4.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.util.promise)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.util.promise ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.util.tracker)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.util.tracker ;version=[1.5.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.util.function)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.util.function ;version=[1.0.0,2.0.0)
    </require>
  </resource>
  <resource id='org.apache.sling.commons.log/3.0.2.r3' presentationname='Apache Sling SLF4J Implementation' symbolicname='org.apache.sling.commons.log' uri='org.apache.sling.commons.log-3.0.2-r3.jar' version='3.0.2.r3'>
    <description>
      This bundle implements the SLF4J API with support for dynamic
              configuration through OSGi Configuration Admin Service.
    </description>
    <size>
      57349
    </size>
    <license>
      https://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://sling.apache.org/site/logging.html
    </documentation>
    <category id='sling'/>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Sling SLF4J Implementation'/>
      <p n='symbolicname' v='org.apache.sling.commons.log'/>
      <p n='version' t='version' v='3.0.2.r3'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.slf4j.impl'/>
      <p n='version' t='version' v='1.7.25'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.3.0))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=1.3.0
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j)(version&gt;=1.6.0)(!(version&gt;=1.8.0)))' multiple='false' name='package' optional='false'>
      Import package org.slf4j ;version=[1.6.0,1.8.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j.spi)(version&gt;=1.6.0)(!(version&gt;=1.8.0)))' multiple='false' name='package' optional='false'>
      Import package org.slf4j.spi ;version=[1.6.0,1.8.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j.helpers)(version&gt;=1.7.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.slf4j.helpers ;version=[1.7.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=sun.reflect)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package sun.reflect
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.7))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.7))
    </require>
  </resource>
  <resource id='org.controlsfx/8.40.14' presentationname='ControlsFX' symbolicname='org.controlsfx' uri='controlsfx-8.40.14.jar' version='8.40.14'>
    <description>
      High quality UI controls and other tools to complement the
       core JavaFX distribution
    </description>
    <size>
      1215643
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='ControlsFX'/>
      <p n='symbolicname' v='org.controlsfx'/>
      <p n='version' t='version' v='8.40.14'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.control'/>
      <p n='uses' v='javafx.beans.property,javafx.beans.value,javafx.collections,javafx.concurrent,javafx.css,javafx.event,javafx.geometry,javafx.scene,javafx.scene.control,javafx.scene.image,javafx.scene.input,javafx.scene.layout,javafx.scene.paint,javafx.scene.shape,javafx.stage,javafx.util,org.controlsfx.control.action,org.controlsfx.property.editor'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.control.action'/>
      <p n='uses' v='javafx.beans,javafx.beans.property,javafx.collections,javafx.event,javafx.scene,javafx.scene.control,javafx.scene.input,org.controlsfx.control'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.control.cell'/>
      <p n='uses' v='javafx.scene.image,javafx.scene.media,javafx.scene.paint,org.controlsfx.control'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.control.decoration'/>
      <p n='uses' v='javafx.collections,javafx.geometry,javafx.scene'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.control.spreadsheet'/>
      <p n='uses' v='javafx.beans.property,javafx.collections,javafx.event,javafx.scene,javafx.scene.control,javafx.util,javafx.util.converter'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.control.table'/>
      <p n='uses' v='javafx.beans.property,javafx.collections,javafx.collections.transformation,javafx.scene,javafx.scene.control,javafx.util'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.control.table.model'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.control.textfield'/>
      <p n='uses' v='javafx.beans.property,javafx.event,javafx.scene,javafx.scene.control,javafx.util'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.dialog'/>
      <p n='uses' v='javafx.beans.property,javafx.collections,javafx.concurrent,javafx.scene,javafx.scene.control,javafx.scene.text,javafx.util'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.glyphfont'/>
      <p n='uses' v='javafx.beans.property,javafx.scene.control,javafx.scene.paint,org.controlsfx.tools'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.property'/>
      <p n='uses' v='javafx.beans.value,javafx.collections,org.controlsfx.control,org.controlsfx.property.editor'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.property.editor'/>
      <p n='uses' v='javafx.beans.value,javafx.scene,javafx.util,org.controlsfx.control'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.tools'/>
      <p n='uses' v='javafx.beans.value,javafx.scene,javafx.scene.control,javafx.scene.layout,javafx.scene.paint,javafx.stage,javafx.util'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.validation'/>
      <p n='uses' v='javafx.beans.property,javafx.scene.control,org.controlsfx.validation.decoration'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.controlsfx.validation.decoration'/>
      <p n='uses' v='javafx.scene,javafx.scene.control,org.controlsfx.control.decoration,org.controlsfx.validation'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.collections)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.collections
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.css)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.css
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.css.converters)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.css.converters
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.event)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.event
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.runtime)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.runtime
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.scene.control)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.scene.control
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.scene.control.behavior)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.scene.control.behavior
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.scene.control.skin)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.scene.control.skin
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.scene.text)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.scene.text
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.scene.traversal)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.scene.traversal
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.javafx.webkit)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.javafx.webkit
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.webkit)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.webkit
    </require>
    <require extend='false' filter='(&amp;(package=javafx.animation)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.animation
    </require>
    <require extend='false' filter='(&amp;(package=javafx.application)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.application
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans.binding)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.binding
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans.property)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.property
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans.value)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.value
    </require>
    <require extend='false' filter='(&amp;(package=javafx.collections)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.collections
    </require>
    <require extend='false' filter='(&amp;(package=javafx.collections.transformation)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.collections.transformation
    </require>
    <require extend='false' filter='(&amp;(package=javafx.concurrent)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.concurrent
    </require>
    <require extend='false' filter='(&amp;(package=javafx.css)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.css
    </require>
    <require extend='false' filter='(&amp;(package=javafx.event)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.event
    </require>
    <require extend='false' filter='(&amp;(package=javafx.geometry)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.geometry
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.chart)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.chart
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.control)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.control
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.control.cell)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.control.cell
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.image)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.image
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.input)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.input
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.layout)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.layout
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.media)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.media
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.paint)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.paint
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.shape)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.shape
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.text)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.text
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.transform)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.transform
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.web)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.web
    </require>
    <require extend='false' filter='(&amp;(package=javafx.stage)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.stage
    </require>
    <require extend='false' filter='(&amp;(package=javafx.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.util
    </require>
    <require extend='false' filter='(&amp;(package=javafx.util.converter)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.util.converter
    </require>
    <require extend='false' filter='(&amp;(package=javax.swing)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing
    </require>
    <require extend='false' filter='(&amp;(package=javax.swing.table)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing.table
    </require>
  </resource>
  <resource id='slf4j.api/1.7.25' presentationname='slf4j-api' symbolicname='slf4j.api' uri='slf4j-api-1.7.25.jar' version='1.7.25'>
    <description>
      The slf4j API
    </description>
    <size>
      41203
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='slf4j-api'/>
      <p n='symbolicname' v='slf4j.api'/>
      <p n='version' t='version' v='1.7.25'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.slf4j'/>
      <p n='version' t='version' v='1.7.25'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.slf4j.spi'/>
      <p n='version' t='version' v='1.7.25'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.slf4j.helpers'/>
      <p n='version' t='version' v='1.7.25'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.slf4j.event'/>
      <p n='version' t='version' v='1.7.25'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.slf4j.impl)(version&gt;=1.6.0))' multiple='false' name='package' optional='false'>
      Import package org.slf4j.impl ;version=1.6.0
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.5))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.5))
    </require>
  </resource>
  <resource id='weasis-core-api-fx/3.0.1.SNAPSHOT' presentationname='Weasis Core API [weasis-core-api-fx]' symbolicname='weasis-core-api-fx' uri='weasis-core-api-fx-3.0.1-SNAPSHOT.jar' version='3.0.1.SNAPSHOT'>
    <size>
      332089
    </size>
    <license>
      http://www.eclipse.org/legal/epl-v10.html
    </license>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Weasis Core API [weasis-core-api-fx]'/>
      <p n='symbolicname' v='weasis-core-api-fx'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.command'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.explorer'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.explorer.model'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.gui'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.gui.model'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.gui.task'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.gui.util'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.image'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.image.measure'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.image.op'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.image.util'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.media'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.media.data'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.service'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.api.util'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javafx.animation)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.animation
    </require>
    <require extend='false' filter='(&amp;(package=javafx.application)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.application
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans.property)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.property
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans.value)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.value
    </require>
    <require extend='false' filter='(&amp;(package=javafx.concurrent)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.concurrent
    </require>
    <require extend='false' filter='(&amp;(package=javafx.embed.swing)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.embed.swing
    </require>
    <require extend='false' filter='(&amp;(package=javafx.event)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.event
    </require>
    <require extend='false' filter='(&amp;(package=javafx.geometry)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.geometry
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.canvas)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.canvas
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.control)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.control
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.image)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.image
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.input)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.input
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.paint)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.paint
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.text)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.text
    </require>
    <require extend='false' filter='(&amp;(package=javafx.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.util
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.stream
    </require>
    <require extend='false' filter='(&amp;(package=javax.swing)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing
    </require>
    <require extend='false' filter='(&amp;(package=javax.swing.border)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing.border
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.namespace)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.namespace
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.stream
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.prefs)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.prefs ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.controlsfx.control)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.controlsfx.control
    </require>
    <require extend='false' filter='(&amp;(package=org.opencv.core)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.opencv.core ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.opencv.imgproc)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.opencv.imgproc ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.opencv.osgi)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.opencv.osgi ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.8.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.8.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.cm)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.cm ;version=[1.5.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.component)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.component ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.prefs)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.prefs ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j)(version&gt;=1.7.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.slf4j ;version=[1.7.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.command)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.command
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.explorer)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.explorer
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.explorer.model)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.explorer.model
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.gui)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.gui
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.gui.model)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.gui.model
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.gui.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.gui.util
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image.measure)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image.measure
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image.op)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image.op
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image.util
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.media.data)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.media.data
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.service)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.service
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.util
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.data)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.data ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.op)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.op ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
  <resource id='weasis-core-ui-fx/3.0.1.SNAPSHOT' presentationname='Weasis UI (JavaFX) [weasis-core-ui-fx]' symbolicname='weasis-core-ui-fx' uri='weasis-core-ui-fx-3.0.1-SNAPSHOT.jar' version='3.0.1.SNAPSHOT'>
    <size>
      312394
    </size>
    <license>
      http://www.eclipse.org/legal/epl-v10.html
    </license>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Weasis UI (JavaFX) [weasis-core-ui-fx]'/>
      <p n='symbolicname' v='weasis-core-ui-fx'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.editor'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.editor.image'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.graphic'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.graphic.imp.angle'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.graphic.imp'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.graphic.imp.area'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.graphic.imp.line'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.imp'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.layer'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.layer.imp'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.utils.algo'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.utils.bean'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.utils'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.utils.exceptions'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.model.utils.imp'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.serialize'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.core.ui.util'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.swing)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing
    </require>
    <require extend='false' filter='(&amp;(package=javax.swing.text)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing.text
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.bind)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.bind
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.bind.annotation)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.bind.annotation
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.bind.annotation.adapters)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.bind.annotation.adapters
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.stream
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.stream.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.stream.util
    </require>
    <require extend='false' filter='(&amp;(package=org.opencv.core)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.opencv.core ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.8.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.8.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j)(version&gt;=1.7.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.slf4j ;version=[1.7.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.command)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.command ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.explorer.model)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.explorer.model ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.gui)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.gui ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.gui.model)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.gui.model ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.gui.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.gui.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image.measure)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image.measure ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.media.data)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.media.data ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.service)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.service ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.editor.image)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.editor.image
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.graphic)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.graphic
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.graphic.imp)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.graphic.imp
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.graphic.imp.angle)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.graphic.imp.angle
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.graphic.imp.area)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.graphic.imp.area
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.graphic.imp.line)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.graphic.imp.line
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.imp)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.imp
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.layer)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.layer
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.layer.imp)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.layer.imp
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.utils)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.utils
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.utils.algo)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.utils.algo
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.utils.bean)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.utils.bean
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.utils.exceptions)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.utils.exceptions
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.utils.imp)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.utils.imp
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.serialize)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.serialize
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.util
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.data)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.data ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.op)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.op ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
  <resource id='weasis-dicom-codec/3.0.1.SNAPSHOT' presentationname='DICOM Codec [weasis-dicom-codec]' symbolicname='weasis-dicom-codec' uri='weasis-dicom-codec-3.0.1-SNAPSHOT.jar' version='3.0.1.SNAPSHOT'>
    <size>
      1233587
    </size>
    <license>
      http://www.eclipse.org/legal/epl-v10.html
    </license>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='DICOM Codec [weasis-dicom-codec]'/>
      <p n='symbolicname' v='weasis-dicom-codec'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.codec'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.codec.display'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.codec.geometry'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.codec.macro'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.codec.utils'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.mf'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.op'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.param'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.tool'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.util'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.data'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.image'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.imageio.codec'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.imageio.codec.jpeg'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.imageio.codec.mpeg'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.imageio.plugins.dcm'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.imageio.stream'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.io'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.media'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.net'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.net.pdu'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.net.service'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.tool.common'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.tool.findscu'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.tool.getscu'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.tool.movescu'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.tool.storescp'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.tool.storescu'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.dcm4che3.util'/>
      <p n='version' t='version' v='5.10.5'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.sun.media.imageioimpl.common)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.sun.media.imageioimpl.common ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.metadata)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.metadata
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.spi)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.spi
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.stream
    </require>
    <require extend='false' filter='(&amp;(package=javax.net.ssl)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.net.ssl
    </require>
    <require extend='false' filter='(&amp;(package=javax.security.auth.x500)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.security.auth.x500
    </require>
    <require extend='false' filter='(&amp;(package=javax.vecmath)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.vecmath
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.namespace)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.namespace
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.parsers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.parsers
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.stream
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.transform)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.transform
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.transform.sax)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.transform.sax
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.transform.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.transform.stream
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.data)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.data ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.image)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.image ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.imageio.codec)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.imageio.codec ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.imageio.codec.jpeg)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.imageio.codec.jpeg ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.imageio.codec.mpeg)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.imageio.codec.mpeg ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.imageio.plugins.dcm)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.imageio.plugins.dcm ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.imageio.stream)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.imageio.stream ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.io)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.io ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.net)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.net ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.net.pdu)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.net.pdu ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.net.service)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.net.service ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.tool.common)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.tool.common
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.tool.findscu)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.tool.findscu
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.tool.getscu)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.tool.getscu
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.tool.movescu)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.tool.movescu
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.tool.storescp)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.tool.storescp
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.tool.storescu)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.tool.storescu
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.util)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.util ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.opencv.core)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.opencv.core ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.opencv.imgcodecs)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.opencv.imgcodecs ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.8.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.8.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.cm)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.cm ;version=[1.5.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.component)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.component ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j)(version&gt;=1.7.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.slf4j ;version=[1.7.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.w3c.dom)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.w3c.dom
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.explorer)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.explorer ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.explorer.model)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.explorer.model ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.gui.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.gui.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.media)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.media ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.media.data)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.media.data ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.service)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.service ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.codec)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.codec
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.codec.display)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.codec.display
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.codec.geometry)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.codec.geometry
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.codec.macro)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.codec.macro
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.codec.utils)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.codec.utils
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.mf)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.mf
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.op)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.op
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.param)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.param
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.util
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.data)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.data ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.op)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.op ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax.helpers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax.helpers
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
  <resource id='weasis-dicom-explorer-fx/3.0.1.SNAPSHOT' presentationname='DICOM Data Explorer [weasis-dicom-explorer-fx]' symbolicname='weasis-dicom-explorer-fx' uri='weasis-dicom-explorer-fx-3.0.1-SNAPSHOT.jar' version='3.0.1.SNAPSHOT'>
    <size>
      138683
    </size>
    <license>
      http://www.eclipse.org/legal/epl-v10.html
    </license>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='DICOM Data Explorer [weasis-dicom-explorer-fx]'/>
      <p n='symbolicname' v='weasis-dicom-explorer-fx'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.explorer'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.explorer.mf'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.explorer.pr'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.dicom.explorer.wado'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javafx.beans.property)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.property
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans.value)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.value
    </require>
    <require extend='false' filter='(&amp;(package=javafx.collections)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.collections
    </require>
    <require extend='false' filter='(&amp;(package=javafx.concurrent)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.concurrent
    </require>
    <require extend='false' filter='(&amp;(package=javafx.event)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.event
    </require>
    <require extend='false' filter='(&amp;(package=javafx.geometry)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.geometry
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.control)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.control
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.layout)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.layout
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.paint)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.paint
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.text)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.text
    </require>
    <require extend='false' filter='(&amp;(package=javax.swing)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing
    </require>
    <require extend='false' filter='(&amp;(package=javax.swing.tree)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing.tree
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.bind)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.bind
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.namespace)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.namespace
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.stream
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.transform)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.transform
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.transform.stax)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.transform.stax
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.transform.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.transform.stream
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.validation)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.validation
    </require>
    <require extend='false' filter='(&amp;(package=org.controlsfx.tools)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.controlsfx.tools
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.data)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.data ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.image)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.image ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.io)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.io ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.media)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.media ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.util)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.util ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.8.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.8.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j)(version&gt;=1.7.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.slf4j ;version=[1.7.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.command)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.command ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.explorer)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.explorer ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.explorer.model)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.explorer.model ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.gui.task)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.gui.task ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.gui.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.gui.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.media)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.media ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.media.data)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.media.data ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.service)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.service ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.graphic)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.graphic ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.graphic.imp)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.graphic.imp ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.graphic.imp.area)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.graphic.imp.area ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.graphic.imp.line)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.graphic.imp.line ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.imp)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.imp ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.layer)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.layer ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.utils.exceptions)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.utils.exceptions ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.serialize)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.serialize ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.codec)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.codec ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.codec.display)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.codec.display ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.codec.macro)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.codec.macro ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.codec.utils)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.codec.utils ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.explorer)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.explorer
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.explorer.pr)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.explorer.pr
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.explorer.wado)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.explorer.wado
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.mf)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.mf ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.param)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.param ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.op)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.op ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
  <resource id='weasis-imageio-codec/3.0.1.SNAPSHOT' presentationname='ImageIO Codec [weasis-imageio-codec]' symbolicname='weasis-imageio-codec' uri='weasis-imageio-codec-3.0.1-SNAPSHOT.jar' version='3.0.1.SNAPSHOT'>
    <size>
      595643
    </size>
    <license>
      http://www.eclipse.org/legal/epl-v10.html
    </license>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='ImageIO Codec [weasis-imageio-codec]'/>
      <p n='symbolicname' v='weasis-imageio-codec'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.imageio.codec'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageio.plugins.bmp'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageio.plugins.pnm'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageio.plugins.tiff'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageio.stream'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageioimpl.common'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageioimpl.plugins.bmp'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageioimpl.plugins.gif'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageioimpl.plugins.jpeg'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageioimpl.plugins.pcx'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageioimpl.plugins.pnm'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageioimpl.plugins.raw'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageioimpl.plugins.tiff'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageioimpl.plugins.wbmp'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.media.imageioimpl.stream'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.sun.media.imageio.plugins.bmp)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.media.imageio.plugins.bmp
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.media.imageio.plugins.pnm)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.media.imageio.plugins.pnm
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.media.imageio.plugins.tiff)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.media.imageio.plugins.tiff
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.media.imageio.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.media.imageio.stream
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.media.imageioimpl.common)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.media.imageioimpl.common
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.media.imageioimpl.plugins.bmp)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.media.imageioimpl.plugins.bmp
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.media.imageioimpl.plugins.tiff)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.media.imageioimpl.plugins.tiff
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.media.imageioimpl.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.media.imageioimpl.stream
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.event)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.event
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.metadata)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.metadata
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.plugins.jpeg)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.plugins.jpeg
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.spi)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.spi
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.stream
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.parsers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.parsers
    </require>
    <require extend='false' filter='(&amp;(package=org.opencv.core)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.opencv.core ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.component)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.component ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j)(version&gt;=1.7.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.slf4j ;version=[1.7.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.w3c.dom)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.w3c.dom
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.explorer)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.explorer ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.explorer.model)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.explorer.model ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.gui.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.gui.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.media.data)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.media.data ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.data)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.data ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.op)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.op ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
  <resource id='weasis-opencv-core/3.0.1.SNAPSHOT' presentationname='OpenCV Java Wrapper [weasis-opencv-core]' symbolicname='weasis-opencv-core' uri='weasis-opencv-core-3.0.1-SNAPSHOT.jar' version='3.0.1.SNAPSHOT'>
    <size>
      144984
    </size>
    <license>
      http://www.eclipse.org/legal/epl-v10.html
    </license>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='OpenCV Java Wrapper [weasis-opencv-core]'/>
      <p n='symbolicname' v='weasis-opencv-core'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.opencv.core'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.opencv.imgcodecs'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.opencv.imgproc'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.opencv.osgi'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.opencv.utils'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.opencv.data'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.opencv.op'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.opencv.op.tile'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.opencv.core)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.opencv.core
    </require>
    <require extend='false' filter='(&amp;(package=org.opencv.imgcodecs)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.opencv.imgcodecs
    </require>
    <require extend='false' filter='(&amp;(package=org.opencv.imgproc)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.opencv.imgproc
    </require>
    <require extend='false' filter='(&amp;(package=org.opencv.utils)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.opencv.utils
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j)(version&gt;=1.7.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.slf4j ;version=[1.7.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.data)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.data
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.op)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.op
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
  <resource id='weasis-opencv-core-linux-x86/3.4.0.dcmR3' presentationname='OpenCV native Linux x86' symbolicname='weasis-opencv-core-linux-x86' uri='weasis-opencv-core-linux-x86-3.4.0-dcmR3.jar' version='3.4.0.dcmR3'>
    <size>
      5161286
    </size>
    <license>
      http://www.eclipse.org/legal/epl-v10.html
    </license>
    <capability name='fragment'>
      <p n='host' v='weasis-opencv-core'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='weasis-opencv-core'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='OpenCV native Linux x86'/>
      <p n='symbolicname' v='weasis-opencv-core-linux-x86'/>
      <p n='version' t='version' v='3.4.0.dcmR3'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=weasis-opencv-core)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host weasis-opencv-core
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
  <resource id='weasis-opencv-core-linux-x86-64/3.4.0.dcmR3' presentationname='OpenCV native Linux amd64' symbolicname='weasis-opencv-core-linux-x86-64' uri='weasis-opencv-core-linux-x86-64-3.4.0-dcmR3.jar' version='3.4.0.dcmR3'>
    <size>
      4845313
    </size>
    <license>
      http://www.eclipse.org/legal/epl-v10.html
    </license>
    <capability name='fragment'>
      <p n='host' v='weasis-opencv-core'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='weasis-opencv-core'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='OpenCV native Linux amd64'/>
      <p n='symbolicname' v='weasis-opencv-core-linux-x86-64'/>
      <p n='version' t='version' v='3.4.0.dcmR3'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=weasis-opencv-core)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host weasis-opencv-core
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
  <resource id='weasis-opencv-core-macosx-x86-64/3.4.0.dcmR3' presentationname='OpenCV native Mac amd64' symbolicname='weasis-opencv-core-macosx-x86-64' uri='weasis-opencv-core-macosx-x86-64-3.4.0-dcmR3.jar' version='3.4.0.dcmR3'>
    <size>
      3890744
    </size>
    <license>
      http://www.eclipse.org/legal/epl-v10.html
    </license>
    <capability name='fragment'>
      <p n='host' v='weasis-opencv-core'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='weasis-opencv-core'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='OpenCV native Mac amd64'/>
      <p n='symbolicname' v='weasis-opencv-core-macosx-x86-64'/>
      <p n='version' t='version' v='3.4.0.dcmR3'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=weasis-opencv-core)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host weasis-opencv-core
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
  <resource id='weasis-opencv-core-windows-x86/3.4.0.dcmR3' presentationname='OpenCV native Windows x86' symbolicname='weasis-opencv-core-windows-x86' uri='weasis-opencv-core-windows-x86-3.4.0-dcmR3.jar' version='3.4.0.dcmR3'>
    <size>
      2658206
    </size>
    <license>
      http://www.eclipse.org/legal/epl-v10.html
    </license>
    <capability name='fragment'>
      <p n='host' v='weasis-opencv-core'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='weasis-opencv-core'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='OpenCV native Windows x86'/>
      <p n='symbolicname' v='weasis-opencv-core-windows-x86'/>
      <p n='version' t='version' v='3.4.0.dcmR3'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=weasis-opencv-core)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host weasis-opencv-core
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
  <resource id='weasis-opencv-core-windows-x86-64/3.4.0.dcmR3' presentationname='OpenCV native Windows x86-64' symbolicname='weasis-opencv-core-windows-x86-64' uri='weasis-opencv-core-windows-x86-64-3.4.0-dcmR3.jar' version='3.4.0.dcmR3'>
    <size>
      3277987
    </size>
    <license>
      http://www.eclipse.org/legal/epl-v10.html
    </license>
    <capability name='fragment'>
      <p n='host' v='weasis-opencv-core'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='weasis-opencv-core'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='OpenCV native Windows x86-64'/>
      <p n='symbolicname' v='weasis-opencv-core-windows-x86-64'/>
      <p n='version' t='version' v='3.4.0.dcmR3'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=weasis-opencv-core)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host weasis-opencv-core
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
  <resource id='weasis-touch-ui/3.0.1.SNAPSHOT' presentationname='Weasis Touch UI [weasis-touch-ui]' symbolicname='weasis-touch-ui' uri='weasis-touch-ui-3.0.1-SNAPSHOT.jar' version='3.0.1.SNAPSHOT'>
    <size>
      373332
    </size>
    <license>
      http://www.eclipse.org/legal/epl-v10.html
    </license>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Weasis Touch UI [weasis-touch-ui]'/>
      <p n='symbolicname' v='weasis-touch-ui'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.touch.gui'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.weasis.touch'/>
      <p n='version' t='version' v='3.0.1.SNAPSHOT'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.jfoenix.controls)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.jfoenix.controls ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.media.imageioimpl.common)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.sun.media.imageioimpl.common ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.media.imageioimpl.stream)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.sun.media.imageioimpl.stream ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javafx.animation)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.animation
    </require>
    <require extend='false' filter='(&amp;(package=javafx.application)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.application
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans.binding)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.binding
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans.property)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.property
    </require>
    <require extend='false' filter='(&amp;(package=javafx.beans.value)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.beans.value
    </require>
    <require extend='false' filter='(&amp;(package=javafx.collections)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.collections
    </require>
    <require extend='false' filter='(&amp;(package=javafx.collections.transformation)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.collections.transformation
    </require>
    <require extend='false' filter='(&amp;(package=javafx.embed.swing)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.embed.swing
    </require>
    <require extend='false' filter='(&amp;(package=javafx.event)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.event
    </require>
    <require extend='false' filter='(&amp;(package=javafx.fxml)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.fxml
    </require>
    <require extend='false' filter='(&amp;(package=javafx.geometry)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.geometry
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.canvas)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.canvas
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.chart)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.chart
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.control)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.control
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.effect)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.effect
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.image)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.image
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.input)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.input
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.layout)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.layout
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.media)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.media
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.paint)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.paint
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.shape)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.shape
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.text)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.text
    </require>
    <require extend='false' filter='(&amp;(package=javafx.scene.transform)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.scene.transform
    </require>
    <require extend='false' filter='(&amp;(package=javafx.stage)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.stage
    </require>
    <require extend='false' filter='(&amp;(package=javafx.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javafx.util
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.spi)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.spi
    </require>
    <require extend='false' filter='(&amp;(package=javax.sound.sampled)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.sound.sampled
    </require>
    <require extend='false' filter='(&amp;(package=javax.vecmath)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.vecmath
    </require>
    <require extend='false' filter='(&amp;(package=org.controlsfx.control)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.controlsfx.control
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.data)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.data ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.imageio.plugins.dcm)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.imageio.plugins.dcm ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.dcm4che3.util)(version&gt;=5.10.0)(!(version&gt;=6.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.dcm4che3.util ;version=[5.10.0,6.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.opencv.osgi)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.opencv.osgi ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.8.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.8.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.component)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.component ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j)(version&gt;=1.7.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.slf4j ;version=[1.7.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.explorer)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.explorer ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.explorer.model)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.explorer.model ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.gui.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.gui.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image.op)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image.op ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.image.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.image.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.media.data)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.media.data ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.service)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.service ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.api.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.api.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.editor)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.editor ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.editor.image)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.editor.image ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.model.layer)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.model.layer ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.core.ui.util)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.core.ui.util ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.codec)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.codec ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.codec.display)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.codec.display ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.codec.geometry)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.codec.geometry ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.dicom.explorer)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.dicom.explorer ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.imageio.codec)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.imageio.codec ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.data)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.data ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.opencv.op)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.weasis.opencv.op ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.weasis.touch)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.weasis.touch
    </require>
    <require extend='false' filter='(|(ee=JavaSE-1.8))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=JavaSE-1.8))
    </require>
  </resource>
</repository>